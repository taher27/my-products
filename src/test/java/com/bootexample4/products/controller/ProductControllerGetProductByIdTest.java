// ********RoostGPT********
/*
Test generated by RoostGPT for test testCheckMavenVs using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getProductById_5e209a8195
ROOST_METHOD_SIG_HASH=getProductById_8904bc73fc

"""
Scenario 1: Validate getProductById with a valid ID
Details:
  TestName: getProductWithValidId
  Description: This test is meant to check the functionality of the getProductById method when provided with a valid product ID.
Execution:
  Arrange: Mock the ProductRepository to return a Product when findById is called with a valid ID.
  Act: Invoke getProductById with a valid product ID.
  Assert: Verify that the returned ResponseEntity contains a Product and the status is OK (200).
Validation:
  The assertion aims to verify that the method behaves as expected when provided with a valid ID. This test is significant as it ensures the core functionality of the method works properly.

Scenario 2: Validate getProductById with an invalid ID
Details:
  TestName: getProductWithInvalidId
  Description: This test is meant to check the functionality of the getProductById method when provided with an invalid product ID.
Execution:
  Arrange: Mock the ProductRepository to return an empty Optional when findById is called with an invalid ID.
  Act: Invoke getProductById with an invalid product ID.
  Assert: Verify that the returned ResponseEntity has a status of NOT_FOUND (404).
Validation:
  The assertion aims to verify that the method behaves as expected when provided with an invalid ID. This test is significant as it ensures the method handles error scenarios properly.

Scenario 3: Validate getProductById with a null ID
Details:
  TestName: getProductWithNullId
  Description: This test is meant to check the functionality of the getProductById method when provided with a null ID.
Execution:
  Arrange: No arrange is required for this test.
  Act: Invoke getProductById with a null ID.
  Assert: Verify that the method throws an IllegalArgumentException.
Validation:
  The assertion aims to verify that the method behaves as expected when provided with a null ID. This test is significant as it ensures the method handles edge cases properly.
"""
*/

// ********RoostGPT********
package com.bootexample4.products.controller;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ProductControllerGetProductByIdTest {

	@Mock
	private ProductRepository productRepository;

	@InjectMocks
	private ProductController productController;

	@Test
	public void getProductWithValidId() {
		Long validId = 1L;
		Product product = new Product();
		when(productRepository.findById(validId)).thenReturn(Optional.of(product));
		ResponseEntity<Product> response = productController.getProductById(validId);
		verify(productRepository, times(1)).findById(validId);
		assertEquals(200, response.getStatusCodeValue());
		assertNotNull(response.getBody());
	}

	@Test
	public void getProductWithInvalidId() {
		Long invalidId = 2L;
		when(productRepository.findById(invalidId)).thenReturn(Optional.empty());
		ResponseEntity<Product> response = productController.getProductById(invalidId);
		verify(productRepository, times(1)).findById(invalidId);
		assertEquals(404, response.getStatusCodeValue());
	}

	@Test
	public void getProductWithNullId() {
		assertThrows(IllegalArgumentException.class, () -> productController.getProductById(null));
		verify(productRepository, times(0)).findById(anyLong());
	}

}
